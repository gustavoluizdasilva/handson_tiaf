unit main;

interface

uses
  System.SysUtils, System.Classes, Data.DB, FireDAC.Comp.DataSet, FireDAC.Comp.Client,
  FireDAC.Phys.PG, FireDAC.Phys.PGDef, Vcl.Forms;

type
  TCliente = class
  private
    FIDCliente: Integer;
    FNome: string;
    FCPF: string;
    FDataNascimento: TDate;
  public
    property IDCliente: Integer read FIDCliente write FIDCliente;
    property Nome: string read FNome write FNome;
    property CPF: string read FCPF write FCPF;
    property DataNascimento: TDate read FDataNascimento write FDataNascimento;
  end;

  TCarro = class
  private
    FIDCarro: Integer;
    FModelo: string;
    FDataLancamento: TDate;
  public
    property IDCarro: Integer read FIDCarro write FIDCarro;
    property Modelo: string read FModelo write FModelo;
    property DataLancamento: TDate read FDataLancamento write FDataLancamento;
  end;

  TVenda = class
  private
    FIDVenda: Integer;
    FIDCliente: Integer;
    FIDCarro: Integer;
    FDataVenda: TDate;
  public
    property IDVenda: Integer read FIDVenda write FIDVenda;
    property IDCliente: Integer read FIDCliente write FIDCliente;
    property IDCarro: Integer read FIDCarro write FIDCarro;
    property DataVenda: TDate read FDataVenda write FDataVenda;
  end;

  TFrmMain = class(TForm)
    procedure FormCreate(Sender: TObject);
  private
    FDConnection1: TFDConnection;
    FDQuery1: TFDQuery;
    procedure InserirDadosBD(Entidade: TObject);
    procedure ExecutarSql(SQL: string);
  public
    procedure CriarTabelas;
    procedure Inserir5Clientes;
    procedure Inserir5Carros;
    procedure InserirVendas;
    procedure ExcluirVendasNaoSorteadas;
  end;

  var
    FrmMain: TFrmMain;

implementation

{ TPrincipal }



procedure TFrmMain.InserirDadosBD(Entidade: TObject);
var
  SQL: string;
begin
  if Entidade is TCliente then
  begin
    // Lógica para inserir Cliente no banco de dados
    // Utilizar FDQuery1 ou qualquer componente apropriado para executar o SQL de inserção
  end
  else if Entidade is TCarro then
  begin
    // Lógica para inserir Carro no banco de dados
    // Utilizar FDQuery1 ou qualquer componente apropriado para executar o SQL de inserção
  end
  else if Entidade is TVenda then
  begin
    // Lógica para inserir Venda no banco de dados
    // Utilizar FDQuery1 ou qualquer componente apropriado para executar o SQL de inserção
  end;
end;

procedure TFrmMain.ExecutarSql(SQL: string);
begin
  // Implementar a lógica de execução de SQL aqui
  // Utilizar FDQuery1 ou qualquer componente apropriado para executar o SQL
end;

procedure TFrmMain.FormCreate(Sender: TObject);
begin
  FDConnection1 := TFDConnection.Create(nil);
  FDConnection1.DriverName := 'PG';
  FDConnection1.Params.Add('Database=vendas');
  FDConnection1.Params.Add('User_Name=postgres');
  FDConnection1.Params.Add('Password=postgres');
  FDConnection1.Params.Add('Server=5432');
  FDConnection1.Connected := True;

  FDQuery1 := TFDQuery.Create(nil);
  FDQuery1.Connection := FDConnection1;
end;

procedure TFrmMain.CriarTabelas;
begin
  // Implementar a lógica para criar as tabelas no banco de dados aqui
  ExecutarSql(
    'CREATE TABLE Cliente (' +
    '  id_cliente SERIAL PRIMARY KEY,' +
    '  nome VARCHAR(100),' +
    '  cpf VARCHAR(11) UNIQUE,' +
    '  data_nascimento DATE' +
    ');'
  );

  ExecutarSql(
    'CREATE TABLE Carro (' +
    '  id_carro SERIAL PRIMARY KEY,' +
    '  modelo VARCHAR(50),' +
    '  data_lancamento DATE' +
    ');'
  );

  ExecutarSql(
    'CREATE TABLE Venda (' +
    '  id_venda SERIAL PRIMARY KEY,' +
    '  id_cliente INT,' +
    '  id_carro INT,' +
    '  data_venda DATE,' +
    '  FOREIGN KEY (id_cliente) REFERENCES Cliente(id_cliente),' +
    '  FOREIGN KEY (id_carro) REFERENCES Carro(id_carro)' +
    ');'
  );
end;

procedure TFrmMain.Inserir5Clientes;
var
  I: Integer;
  Cliente: TCliente;
begin
  for I := 1 to 5 do
  begin
    Cliente := TCliente.Create;
    Cliente.Nome := 'Cliente' + IntToStr(I);
    Cliente.CPF := '0' + IntToStr(I);
    Cliente.DataNascimento := EncodeDate(2000, 1, 1) + I; // Exemplo: datas diferentes para cada cliente
    InserirDadosBD(Cliente);
    Cliente.Free;
  end;
end;

procedure TFrmMain.Inserir5Carros;
var
  I: Integer;
  Carro: TCarro;
begin
  for I := 1 to 5 do
  begin
    Carro := TCarro.Create;
    Carro.Modelo := 'Carro' + IntToStr(I);
    Carro.DataLancamento := EncodeDate(2022, I, 1); // Exemplo: datas diferentes para cada carro
    InserirDadosBD(Carro);
    Carro.Free;
  end;
end;

procedure TFrmMain.InserirVendas;
var
  I: Integer;
  Venda: TVenda;
begin
  for I := 1 to 5 do
  begin
    Venda := TVenda.Create;
    Venda.IDCliente := I; // Considerando que os IDs dos clientes e carros correspondem às inserções anteriores
    Venda.IDCarro := I;
    Venda.DataVenda := Now; // Alterar para a data correta
    InserirDadosBD(Venda);
    Venda.Free;
  end;
end;

procedure TFrmMain.ExcluirVendasNaoSorteadas;
begin
  // Implementar a lógica para excluir vendas não sorteadas
  // Utilizar FDQuery1 ou qualquer componente apropriado para executar o SQL de exclusão
  // Lembrando de aplicar as condições especificadas para o sorteio
end;

end.

